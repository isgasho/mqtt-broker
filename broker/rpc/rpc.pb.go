// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	SessionFilter
	CloseSessionInput
	CloseSessionOutput
	ListSessionsOutput
	MessagePublished
	MessagePublishedOutput
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/vx-labs/mqtt-broker/topics"
import _ "github.com/vx-labs/mqtt-broker/subscriptions"
import sessions "github.com/vx-labs/mqtt-broker/sessions"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionFilter struct {
}

func (m *SessionFilter) Reset()                    { *m = SessionFilter{} }
func (m *SessionFilter) String() string            { return proto.CompactTextString(m) }
func (*SessionFilter) ProtoMessage()               {}
func (*SessionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CloseSessionInput struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *CloseSessionInput) Reset()                    { *m = CloseSessionInput{} }
func (m *CloseSessionInput) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionInput) ProtoMessage()               {}
func (*CloseSessionInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CloseSessionInput) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CloseSessionOutput struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *CloseSessionOutput) Reset()                    { *m = CloseSessionOutput{} }
func (m *CloseSessionOutput) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionOutput) ProtoMessage()               {}
func (*CloseSessionOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CloseSessionOutput) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ListSessionsOutput struct {
	Sessions []*sessions.SessionMD `protobuf:"bytes,1,rep,name=Sessions" json:"Sessions,omitempty"`
}

func (m *ListSessionsOutput) Reset()                    { *m = ListSessionsOutput{} }
func (m *ListSessionsOutput) String() string            { return proto.CompactTextString(m) }
func (*ListSessionsOutput) ProtoMessage()               {}
func (*ListSessionsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListSessionsOutput) GetSessions() []*sessions.SessionMD {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type MessagePublished struct {
	Recipient []string `protobuf:"bytes,1,rep,name=Recipient" json:"Recipient,omitempty"`
	Topic     []byte   `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Qos       []int32  `protobuf:"varint,3,rep,packed,name=Qos" json:"Qos,omitempty"`
	Payload   []byte   `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Retained  bool     `protobuf:"varint,5,opt,name=Retained" json:"Retained,omitempty"`
	Dup       bool     `protobuf:"varint,6,opt,name=Dup" json:"Dup,omitempty"`
}

func (m *MessagePublished) Reset()                    { *m = MessagePublished{} }
func (m *MessagePublished) String() string            { return proto.CompactTextString(m) }
func (*MessagePublished) ProtoMessage()               {}
func (*MessagePublished) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MessagePublished) GetRecipient() []string {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *MessagePublished) GetTopic() []byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *MessagePublished) GetQos() []int32 {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *MessagePublished) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MessagePublished) GetRetained() bool {
	if m != nil {
		return m.Retained
	}
	return false
}

func (m *MessagePublished) GetDup() bool {
	if m != nil {
		return m.Dup
	}
	return false
}

type MessagePublishedOutput struct {
}

func (m *MessagePublishedOutput) Reset()                    { *m = MessagePublishedOutput{} }
func (m *MessagePublishedOutput) String() string            { return proto.CompactTextString(m) }
func (*MessagePublishedOutput) ProtoMessage()               {}
func (*MessagePublishedOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*SessionFilter)(nil), "SessionFilter")
	proto.RegisterType((*CloseSessionInput)(nil), "CloseSessionInput")
	proto.RegisterType((*CloseSessionOutput)(nil), "CloseSessionOutput")
	proto.RegisterType((*ListSessionsOutput)(nil), "ListSessionsOutput")
	proto.RegisterType((*MessagePublished)(nil), "MessagePublished")
	proto.RegisterType((*MessagePublishedOutput)(nil), "MessagePublishedOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BrokerService service

type BrokerServiceClient interface {
	ListSessions(ctx context.Context, in *SessionFilter, opts ...grpc.CallOption) (*ListSessionsOutput, error)
	CloseSession(ctx context.Context, in *CloseSessionInput, opts ...grpc.CallOption) (*CloseSessionOutput, error)
	DistributeMessage(ctx context.Context, in *MessagePublished, opts ...grpc.CallOption) (*MessagePublishedOutput, error)
}

type brokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewBrokerServiceClient(cc *grpc.ClientConn) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) ListSessions(ctx context.Context, in *SessionFilter, opts ...grpc.CallOption) (*ListSessionsOutput, error) {
	out := new(ListSessionsOutput)
	err := grpc.Invoke(ctx, "/BrokerService/ListSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) CloseSession(ctx context.Context, in *CloseSessionInput, opts ...grpc.CallOption) (*CloseSessionOutput, error) {
	out := new(CloseSessionOutput)
	err := grpc.Invoke(ctx, "/BrokerService/CloseSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) DistributeMessage(ctx context.Context, in *MessagePublished, opts ...grpc.CallOption) (*MessagePublishedOutput, error) {
	out := new(MessagePublishedOutput)
	err := grpc.Invoke(ctx, "/BrokerService/DistributeMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerService service

type BrokerServiceServer interface {
	ListSessions(context.Context, *SessionFilter) (*ListSessionsOutput, error)
	CloseSession(context.Context, *CloseSessionInput) (*CloseSessionOutput, error)
	DistributeMessage(context.Context, *MessagePublished) (*MessagePublishedOutput, error)
}

func RegisterBrokerServiceServer(s *grpc.Server, srv BrokerServiceServer) {
	s.RegisterService(&_BrokerService_serviceDesc, srv)
}

func _BrokerService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerService/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ListSessions(ctx, req.(*SessionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerService/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CloseSession(ctx, req.(*CloseSessionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_DistributeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagePublished)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).DistributeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerService/DistributeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).DistributeMessage(ctx, req.(*MessagePublished))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSessions",
			Handler:    _BrokerService_ListSessions_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _BrokerService_CloseSession_Handler,
		},
		{
			MethodName: "DistributeMessage",
			Handler:    _BrokerService_DistributeMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x51, 0xcf, 0xd2, 0x30,
	0x14, 0xcd, 0x98, 0x20, 0xbb, 0x02, 0x42, 0x31, 0xda, 0x2c, 0x3e, 0x2c, 0xd3, 0x87, 0xbd, 0xd0,
	0x45, 0x78, 0xd0, 0x37, 0x13, 0x9d, 0x26, 0x24, 0x12, 0xb1, 0xf8, 0x07, 0xb6, 0xd1, 0x40, 0xe3,
	0x58, 0x6b, 0xdb, 0x11, 0xf9, 0x37, 0xfe, 0x12, 0x7f, 0x9b, 0xd9, 0x18, 0x7c, 0xc0, 0xb7, 0x84,
	0xb7, 0x7b, 0x4f, 0xcf, 0xb9, 0x39, 0xf7, 0xdc, 0x82, 0xa3, 0x64, 0x4a, 0xa4, 0x12, 0x46, 0xb8,
	0xef, 0x36, 0xdc, 0x6c, 0x8b, 0x84, 0xa4, 0x62, 0x17, 0xee, 0xff, 0x4c, 0xb2, 0x38, 0xd1, 0xe1,
	0xee, 0xb7, 0x31, 0x93, 0x44, 0x89, 0x5f, 0x4c, 0x85, 0x46, 0x48, 0x9e, 0xea, 0xd0, 0x1c, 0x24,
	0xd3, 0xb5, 0xe4, 0xc3, 0x1d, 0x89, 0x2e, 0x12, 0x9d, 0x2a, 0x2e, 0x0d, 0x17, 0xf9, 0xb5, 0x72,
	0x76, 0x4f, 0xc9, 0xb4, 0xbe, 0x15, 0xf9, 0xcf, 0xa1, 0xbf, 0x3a, 0xe2, 0x5f, 0x79, 0x66, 0x98,
	0xf2, 0xdf, 0xc0, 0xe8, 0x73, 0x26, 0x34, 0xab, 0xd1, 0x79, 0x2e, 0x0b, 0x83, 0x06, 0xd0, 0x9a,
	0x47, 0xd8, 0xf2, 0xac, 0xc0, 0xa1, 0xad, 0x79, 0xe4, 0xbf, 0x05, 0x74, 0x49, 0xfa, 0x5e, 0x98,
	0x26, 0xd6, 0x17, 0x40, 0xdf, 0xb8, 0x36, 0x35, 0x49, 0xd7, 0xac, 0x10, 0xba, 0x27, 0x04, 0x5b,
	0x9e, 0x1d, 0x3c, 0x9b, 0x8e, 0xc9, 0xc9, 0x1a, 0xa9, 0x5f, 0x16, 0x11, 0x3d, 0x93, 0xfc, 0xbf,
	0x16, 0x0c, 0x17, 0x4c, 0xeb, 0x78, 0xc3, 0x96, 0x45, 0x92, 0x71, 0xbd, 0x65, 0x6b, 0xf4, 0x1a,
	0x1c, 0xca, 0x52, 0x2e, 0x39, 0xcb, 0x4d, 0x35, 0xc6, 0xa1, 0x0f, 0x00, 0x7a, 0x01, 0xed, 0x9f,
	0x65, 0xb4, 0xb8, 0xe5, 0x59, 0x41, 0x8f, 0x1e, 0x1b, 0x34, 0x04, 0xfb, 0x87, 0xd0, 0xd8, 0xf6,
	0xec, 0xa0, 0x4d, 0xcb, 0x12, 0x61, 0x78, 0xba, 0x8c, 0x0f, 0x99, 0x88, 0xd7, 0xf8, 0x49, 0xc5,
	0x3c, 0xb5, 0xc8, 0x85, 0x2e, 0x65, 0x26, 0xe6, 0x39, 0x5b, 0xe3, 0xb6, 0x67, 0x05, 0x5d, 0x7a,
	0xee, 0xcb, 0x39, 0x51, 0x21, 0x71, 0xa7, 0x82, 0xcb, 0xd2, 0xc7, 0xf0, 0xf2, 0xd6, 0xe1, 0x71,
	0xdb, 0xe9, 0x3f, 0x0b, 0xfa, 0x9f, 0xaa, 0xfc, 0x57, 0x4c, 0xed, 0x79, 0xca, 0xd0, 0x0c, 0x7a,
	0x97, 0xa9, 0xa0, 0x01, 0xb9, 0x3a, 0x80, 0x3b, 0x26, 0x0d, 0xa1, 0xbd, 0x87, 0xde, 0x65, 0xe0,
	0x08, 0x91, 0x47, 0x47, 0x72, 0xc7, 0xa4, 0xe1, 0x26, 0x1f, 0x61, 0x14, 0x71, 0x6d, 0x14, 0x4f,
	0x0a, 0xc3, 0x6a, 0x8f, 0x68, 0x44, 0x6e, 0xdd, 0xba, 0xaf, 0x48, 0xf3, 0x02, 0x49, 0xa7, 0xfa,
	0x27, 0xb3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x2a, 0xad, 0x0d, 0xd6, 0x02, 0x00, 0x00,
}
